// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BasketBusinessTestsGherkin.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class BasketFeature : object, Xunit.IClassFixture<BasketFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Basket.feature"
#line hidden
        
        public BasketFeature(BasketFeature.FixtureData fixtureData, BasketBusinessTestsGherkin_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Basket", "As a Customer\r\nI want to get information of checked products in my cart\r\nSo I can" +
                    " know how much money will cost me", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "product",
                        "prize",
                        "currency",
                        "discount"});
            table1.AddRow(new string[] {
                        "motion-cam-hero-09-2019",
                        "10",
                        "EUR",
                        "10%"});
            table1.AddRow(new string[] {
                        "motion-cam-hero-10-2021",
                        "10",
                        "EUR",
                        "0%"});
            table1.AddRow(new string[] {
                        "phone-hero-13-2022",
                        "1342",
                        "EUR",
                        "0%"});
            table1.AddRow(new string[] {
                        "phone-hero-12-2019",
                        "999",
                        "EUR",
                        "5%"});
#line 6
 testRunner.Given("the catalogue has following products", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "PersonaName",
                        "Fidelity discount",
                        "Preferred currency"});
            table2.AddRow(new string[] {
                        "David",
                        "0%",
                        "EUR"});
            table2.AddRow(new string[] {
                        "Maria",
                        "20%",
                        "EUR"});
            table2.AddRow(new string[] {
                        "Paul",
                        "0%",
                        "USD"});
            table2.AddRow(new string[] {
                        "Oshiro",
                        "10%",
                        "JPY"});
            table2.AddRow(new string[] {
                        "Jules",
                        "5%",
                        "JPY"});
#line 12
 testRunner.And("these personas are registered", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "From Currency",
                        "To Currency",
                        "Rate"});
            table3.AddRow(new string[] {
                        "EUR",
                        "USD",
                        "1.134"});
            table3.AddRow(new string[] {
                        "USD",
                        "EUR",
                        "0.881"});
            table3.AddRow(new string[] {
                        "USD",
                        "JPY",
                        "114.386"});
            table3.AddRow(new string[] {
                        "JPY",
                        "USD",
                        "0.009"});
            table3.AddRow(new string[] {
                        "JPY",
                        "EUR",
                        "0.008"});
            table3.AddRow(new string[] {
                        "EUR",
                        "JPY",
                        "129.737"});
#line 19
 testRunner.And("the exchange rate at the time of operation is as follows", ((string)(null)), table3, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delta00->This is a dummy scenario to illustrate architecture")]
        [Xunit.TraitAttribute("FeatureTitle", "Basket")]
        [Xunit.TraitAttribute("Description", "Delta00->This is a dummy scenario to illustrate architecture")]
        [Xunit.TraitAttribute("Category", "executedInDelta00")]
        public void Delta00_ThisIsADummyScenarioToIllustrateArchitecture()
        {
            string[] tagsOfScenario = new string[] {
                    "executedInDelta00"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delta00->This is a dummy scenario to illustrate architecture", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 32
 testRunner.Given("I create a sample answer request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 33
 testRunner.When("I send the request to the service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 34
 testRunner.Then("the content of sample answer response will be \'true\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delta01->A persona can check in a single product")]
        [Xunit.TraitAttribute("FeatureTitle", "Basket")]
        [Xunit.TraitAttribute("Description", "Delta01->A persona can check in a single product")]
        [Xunit.TraitAttribute("Category", "executedInDelta00")]
        [Xunit.TraitAttribute("Category", "executedInDelta01")]
        public void Delta01_APersonaCanCheckInASingleProduct()
        {
            string[] tagsOfScenario = new string[] {
                    "executedInDelta00",
                    "executedInDelta01"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delta01->A persona can check in a single product", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 39
 testRunner.Given("I am David", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 40
 testRunner.And("I am having an empty cart", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
 testRunner.And("I check in a product \'motion-cam-hero-10-2021\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
 testRunner.When("I list checked in products", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 43
 testRunner.Then("there will be a single product with code \'motion-cam-hero-10-2021\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 44
 testRunner.And("cart total will be 10 EUR", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delta02->A persona can check in same product several times")]
        [Xunit.TraitAttribute("FeatureTitle", "Basket")]
        [Xunit.TraitAttribute("Description", "Delta02->A persona can check in same product several times")]
        [Xunit.TraitAttribute("Category", "executedInDelta00")]
        [Xunit.TraitAttribute("Category", "executedInDelta01")]
        [Xunit.TraitAttribute("Category", "executedInDelta02")]
        public void Delta02_APersonaCanCheckInSameProductSeveralTimes()
        {
            string[] tagsOfScenario = new string[] {
                    "executedInDelta00",
                    "executedInDelta01",
                    "executedInDelta02"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delta02->A persona can check in same product several times", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 49
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 50
 testRunner.Given("I am David", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 51
 testRunner.And("I am having an empty cart", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "product"});
                table4.AddRow(new string[] {
                            "motion-cam-hero-10-2021"});
#line 52
 testRunner.And("I add following products to my cart 2 times", ((string)(null)), table4, "And ");
#line hidden
#line 55
 testRunner.When("I list checked in products", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "product",
                            "prize"});
                table5.AddRow(new string[] {
                            "motion-cam-hero-10-2021",
                            "10"});
                table5.AddRow(new string[] {
                            "motion-cam-hero-10-2021",
                            "10"});
#line 56
 testRunner.Then("following products will be found", ((string)(null)), table5, "Then ");
#line hidden
#line 60
 testRunner.And("total cost will be 20 EUR", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delta03->A persona can also check in several products")]
        [Xunit.TraitAttribute("FeatureTitle", "Basket")]
        [Xunit.TraitAttribute("Description", "Delta03->A persona can also check in several products")]
        [Xunit.TraitAttribute("Category", "executedInDelta00")]
        [Xunit.TraitAttribute("Category", "executedInDelta01")]
        [Xunit.TraitAttribute("Category", "executedInDelta02")]
        [Xunit.TraitAttribute("Category", "executedInDelta03")]
        public void Delta03_APersonaCanAlsoCheckInSeveralProducts()
        {
            string[] tagsOfScenario = new string[] {
                    "executedInDelta00",
                    "executedInDelta01",
                    "executedInDelta02",
                    "executedInDelta03"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delta03->A persona can also check in several products", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 67
 testRunner.Given("I am David", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 68
 testRunner.And("I am having an empty cart", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "product"});
                table6.AddRow(new string[] {
                            "motion-cam-hero-10-2021"});
                table6.AddRow(new string[] {
                            "phone-hero-13-2022"});
#line 69
 testRunner.And("I add following products to my cart", ((string)(null)), table6, "And ");
#line hidden
#line 73
 testRunner.When("I list checked in products", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "product",
                            "prize"});
                table7.AddRow(new string[] {
                            "motion-cam-hero-10-2021",
                            "10"});
                table7.AddRow(new string[] {
                            "phone-hero-13-2022",
                            "1342"});
#line 74
 testRunner.Then("following products will be found", ((string)(null)), table7, "Then ");
#line hidden
#line 78
 testRunner.And("cart total will be 1352 EUR", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delta04->A persona can check in a product and pay in a different currency than pr" +
            "eferred one")]
        [Xunit.TraitAttribute("FeatureTitle", "Basket")]
        [Xunit.TraitAttribute("Description", "Delta04->A persona can check in a product and pay in a different currency than pr" +
            "eferred one")]
        [Xunit.TraitAttribute("Category", "executedInDelta00")]
        [Xunit.TraitAttribute("Category", "executedInDelta01")]
        [Xunit.TraitAttribute("Category", "executedInDelta02")]
        [Xunit.TraitAttribute("Category", "executedInDelta03")]
        [Xunit.TraitAttribute("Category", "executedInDelta04")]
        public void Delta04_APersonaCanCheckInAProductAndPayInADifferentCurrencyThanPreferredOne()
        {
            string[] tagsOfScenario = new string[] {
                    "executedInDelta00",
                    "executedInDelta01",
                    "executedInDelta02",
                    "executedInDelta03",
                    "executedInDelta04"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delta04->A persona can check in a product and pay in a different currency than pr" +
                    "eferred one", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 85
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 86
 testRunner.Given("I am Paul", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 87
 testRunner.And("I am having an empty cart", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 88
 testRunner.And("I check in a product \'motion-cam-hero-10-2021\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 89
 testRunner.When("I list checked in products", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 90
 testRunner.Then("there will be a single product with code \'motion-cam-hero-10-2021\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 91
 testRunner.And("cart total will be 11.34 USD", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delta05->A persona purchases a checked in product")]
        [Xunit.TraitAttribute("FeatureTitle", "Basket")]
        [Xunit.TraitAttribute("Description", "Delta05->A persona purchases a checked in product")]
        [Xunit.TraitAttribute("Category", "executedInDelta00")]
        [Xunit.TraitAttribute("Category", "executedInDelta01")]
        [Xunit.TraitAttribute("Category", "executedInDelta02")]
        [Xunit.TraitAttribute("Category", "executedInDelta03")]
        [Xunit.TraitAttribute("Category", "executedInDelta04")]
        [Xunit.TraitAttribute("Category", "executedInDelta05")]
        public void Delta05_APersonaPurchasesACheckedInProduct()
        {
            string[] tagsOfScenario = new string[] {
                    "executedInDelta00",
                    "executedInDelta01",
                    "executedInDelta02",
                    "executedInDelta03",
                    "executedInDelta04",
                    "executedInDelta05"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delta05->A persona purchases a checked in product", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 101
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 102
 testRunner.Given("I am Paul", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 103
 testRunner.And("I check in a product \'motion-cam-hero-10-2021\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 104
 testRunner.When("I purchase my product", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 105
 testRunner.Then("I will receive a message \'Thank you for your purchase\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delta06->A persona cannot purchase when cart is empty")]
        [Xunit.TraitAttribute("FeatureTitle", "Basket")]
        [Xunit.TraitAttribute("Description", "Delta06->A persona cannot purchase when cart is empty")]
        [Xunit.TraitAttribute("Category", "executedInDelta00")]
        [Xunit.TraitAttribute("Category", "executedInDelta01")]
        [Xunit.TraitAttribute("Category", "executedInDelta02")]
        [Xunit.TraitAttribute("Category", "executedInDelta03")]
        [Xunit.TraitAttribute("Category", "executedInDelta04")]
        [Xunit.TraitAttribute("Category", "executedInDelta05")]
        [Xunit.TraitAttribute("Category", "executedInDelta06")]
        public void Delta06_APersonaCannotPurchaseWhenCartIsEmpty()
        {
            string[] tagsOfScenario = new string[] {
                    "executedInDelta00",
                    "executedInDelta01",
                    "executedInDelta02",
                    "executedInDelta03",
                    "executedInDelta04",
                    "executedInDelta05",
                    "executedInDelta06"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delta06->A persona cannot purchase when cart is empty", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 114
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 115
 testRunner.Given("I am Paul", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 116
 testRunner.And("I am having an empty cart", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 117
 testRunner.When("I purchase my product", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 118
 testRunner.Then("I will receive a message \'There are no items to purchase\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delta07->A persona who checks in a discounted product will get a discount")]
        [Xunit.TraitAttribute("FeatureTitle", "Basket")]
        [Xunit.TraitAttribute("Description", "Delta07->A persona who checks in a discounted product will get a discount")]
        [Xunit.TraitAttribute("Category", "executedInDelta00")]
        [Xunit.TraitAttribute("Category", "executedInDelta01")]
        [Xunit.TraitAttribute("Category", "executedInDelta02")]
        [Xunit.TraitAttribute("Category", "executedInDelta03")]
        [Xunit.TraitAttribute("Category", "executedInDelta04")]
        [Xunit.TraitAttribute("Category", "executedInDelta05")]
        [Xunit.TraitAttribute("Category", "executedInDelta06")]
        [Xunit.TraitAttribute("Category", "executedInDelta07")]
        public void Delta07_APersonaWhoChecksInADiscountedProductWillGetADiscount()
        {
            string[] tagsOfScenario = new string[] {
                    "executedInDelta00",
                    "executedInDelta01",
                    "executedInDelta02",
                    "executedInDelta03",
                    "executedInDelta04",
                    "executedInDelta05",
                    "executedInDelta06",
                    "executedInDelta07"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delta07->A persona who checks in a discounted product will get a discount", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 130
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 131
 testRunner.Given("I am David", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 132
 testRunner.And("I am having an empty cart", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "product"});
                table8.AddRow(new string[] {
                            "motion-cam-hero-10-2021"});
                table8.AddRow(new string[] {
                            "motion-cam-hero-09-2019"});
#line 133
 testRunner.And("I add following products to my cart", ((string)(null)), table8, "And ");
#line hidden
#line 137
 testRunner.When("I list checked in products", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "product",
                            "prize"});
                table9.AddRow(new string[] {
                            "motion-cam-hero-10-2021",
                            "10"});
                table9.AddRow(new string[] {
                            "motion-cam-hero-09-2019",
                            "9"});
#line 138
 testRunner.Then("following products will be found", ((string)(null)), table9, "Then ");
#line hidden
#line 142
 testRunner.And("cart total will be 19 EUR", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delta08->A persona with fidelity discount will get a discount on final price")]
        [Xunit.TraitAttribute("FeatureTitle", "Basket")]
        [Xunit.TraitAttribute("Description", "Delta08->A persona with fidelity discount will get a discount on final price")]
        [Xunit.TraitAttribute("Category", "executedInDelta00")]
        [Xunit.TraitAttribute("Category", "executedInDelta01")]
        [Xunit.TraitAttribute("Category", "executedInDelta02")]
        [Xunit.TraitAttribute("Category", "executedInDelta03")]
        [Xunit.TraitAttribute("Category", "executedInDelta04")]
        [Xunit.TraitAttribute("Category", "executedInDelta05")]
        [Xunit.TraitAttribute("Category", "executedInDelta06")]
        [Xunit.TraitAttribute("Category", "executedInDelta07")]
        [Xunit.TraitAttribute("Category", "executedInDelta08")]
        public void Delta08_APersonaWithFidelityDiscountWillGetADiscountOnFinalPrice()
        {
            string[] tagsOfScenario = new string[] {
                    "executedInDelta00",
                    "executedInDelta01",
                    "executedInDelta02",
                    "executedInDelta03",
                    "executedInDelta04",
                    "executedInDelta05",
                    "executedInDelta06",
                    "executedInDelta07",
                    "executedInDelta08"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delta08->A persona with fidelity discount will get a discount on final price", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 155
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 156
 testRunner.Given("I am Maria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 157
 testRunner.And("I am having an empty cart", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 158
 testRunner.And("I check in a product \'motion-cam-hero-10-2021\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 159
 testRunner.When("I list checked in products", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 160
 testRunner.Then("there will be a single product with code \'motion-cam-hero-10-2021\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 161
 testRunner.And("cart total will be 8 EUR", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 162
 testRunner.And("cart total will show a discount of 2 EUR", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delta09->Product discount does not apply for personas with fidelity discount")]
        [Xunit.TraitAttribute("FeatureTitle", "Basket")]
        [Xunit.TraitAttribute("Description", "Delta09->Product discount does not apply for personas with fidelity discount")]
        [Xunit.TraitAttribute("Category", "executedInDelta00")]
        [Xunit.TraitAttribute("Category", "executedInDelta01")]
        [Xunit.TraitAttribute("Category", "executedInDelta02")]
        [Xunit.TraitAttribute("Category", "executedInDelta03")]
        [Xunit.TraitAttribute("Category", "executedInDelta04")]
        [Xunit.TraitAttribute("Category", "executedInDelta05")]
        [Xunit.TraitAttribute("Category", "executedInDelta06")]
        [Xunit.TraitAttribute("Category", "executedInDelta07")]
        [Xunit.TraitAttribute("Category", "executedInDelta08")]
        [Xunit.TraitAttribute("Category", "executedInDelta09")]
        public void Delta09_ProductDiscountDoesNotApplyForPersonasWithFidelityDiscount()
        {
            string[] tagsOfScenario = new string[] {
                    "executedInDelta00",
                    "executedInDelta01",
                    "executedInDelta02",
                    "executedInDelta03",
                    "executedInDelta04",
                    "executedInDelta05",
                    "executedInDelta06",
                    "executedInDelta07",
                    "executedInDelta08",
                    "executedInDelta09"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delta09->Product discount does not apply for personas with fidelity discount", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 174
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 175
 testRunner.Given("I am Maria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 176
 testRunner.And("I am having an empty cart", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "product"});
                table10.AddRow(new string[] {
                            "motion-cam-hero-10-2021"});
                table10.AddRow(new string[] {
                            "motion-cam-hero-9-2019"});
#line 177
 testRunner.And("I add following products to my cart", ((string)(null)), table10, "And ");
#line hidden
#line 181
 testRunner.When("I list checked in products", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "product",
                            "prize"});
                table11.AddRow(new string[] {
                            "motion-cam-hero-9-2019",
                            "10"});
                table11.AddRow(new string[] {
                            "motion-cam-hero-9-2019",
                            "10"});
#line 182
 testRunner.Then("following products will be found", ((string)(null)), table11, "Then ");
#line hidden
#line 186
 testRunner.And("cart total will be 16 EUR", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 187
 testRunner.And("cart total will show a discount of 4 EUR", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delta10->Product discount does not apply on a different currency than local one")]
        [Xunit.TraitAttribute("FeatureTitle", "Basket")]
        [Xunit.TraitAttribute("Description", "Delta10->Product discount does not apply on a different currency than local one")]
        [Xunit.TraitAttribute("Category", "executedInDelta00")]
        [Xunit.TraitAttribute("Category", "executedInDelta01")]
        [Xunit.TraitAttribute("Category", "executedInDelta02")]
        [Xunit.TraitAttribute("Category", "executedInDelta03")]
        [Xunit.TraitAttribute("Category", "executedInDelta04")]
        [Xunit.TraitAttribute("Category", "executedInDelta05")]
        [Xunit.TraitAttribute("Category", "executedInDelta06")]
        [Xunit.TraitAttribute("Category", "executedInDelta07")]
        [Xunit.TraitAttribute("Category", "executedInDelta08")]
        [Xunit.TraitAttribute("Category", "executedInDelta09")]
        [Xunit.TraitAttribute("Category", "executedInDelta10")]
        public void Delta10_ProductDiscountDoesNotApplyOnADifferentCurrencyThanLocalOne()
        {
            string[] tagsOfScenario = new string[] {
                    "executedInDelta00",
                    "executedInDelta01",
                    "executedInDelta02",
                    "executedInDelta03",
                    "executedInDelta04",
                    "executedInDelta05",
                    "executedInDelta06",
                    "executedInDelta07",
                    "executedInDelta08",
                    "executedInDelta09",
                    "executedInDelta10"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delta10->Product discount does not apply on a different currency than local one", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 200
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 201
 testRunner.Given("I am Paul", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 202
 testRunner.And("I am having an empty cart", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 203
 testRunner.And("I check in a product \'motion-cam-hero-09-2019\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 204
 testRunner.When("I list checked in products", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 205
 testRunner.Then("there will be a single product with code \'motion-cam-hero-09-2019\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 206
 testRunner.And("cart total will be 11.34 USD", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delta11->Fidelity discount applies on a different currency than local one")]
        [Xunit.TraitAttribute("FeatureTitle", "Basket")]
        [Xunit.TraitAttribute("Description", "Delta11->Fidelity discount applies on a different currency than local one")]
        [Xunit.TraitAttribute("Category", "executedInDelta00")]
        [Xunit.TraitAttribute("Category", "executedInDelta01")]
        [Xunit.TraitAttribute("Category", "executedInDelta02")]
        [Xunit.TraitAttribute("Category", "executedInDelta03")]
        [Xunit.TraitAttribute("Category", "executedInDelta04")]
        [Xunit.TraitAttribute("Category", "executedInDelta05")]
        [Xunit.TraitAttribute("Category", "executedInDelta06")]
        [Xunit.TraitAttribute("Category", "executedInDelta07")]
        [Xunit.TraitAttribute("Category", "executedInDelta08")]
        [Xunit.TraitAttribute("Category", "executedInDelta09")]
        [Xunit.TraitAttribute("Category", "executedInDelta10")]
        [Xunit.TraitAttribute("Category", "executedInDelta11")]
        public void Delta11_FidelityDiscountAppliesOnADifferentCurrencyThanLocalOne()
        {
            string[] tagsOfScenario = new string[] {
                    "executedInDelta00",
                    "executedInDelta01",
                    "executedInDelta02",
                    "executedInDelta03",
                    "executedInDelta04",
                    "executedInDelta05",
                    "executedInDelta06",
                    "executedInDelta07",
                    "executedInDelta08",
                    "executedInDelta09",
                    "executedInDelta10",
                    "executedInDelta11"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delta11->Fidelity discount applies on a different currency than local one", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 220
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 221
 testRunner.Given("I am Jules", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 222
 testRunner.And("I am having an empty cart", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 223
 testRunner.And("I check in a product \'motion-cam-hero-09-2019\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 224
 testRunner.When("I list checked in products", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 225
 testRunner.Then("there will be a single product with code \'motion-cam-hero-09-2019\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 226
 testRunner.And("cart total will be 10.77 USD", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delta12->Fidelity discount is assigned to currency")]
        [Xunit.TraitAttribute("FeatureTitle", "Basket")]
        [Xunit.TraitAttribute("Description", "Delta12->Fidelity discount is assigned to currency")]
        [Xunit.TraitAttribute("Category", "executedInDelta00")]
        [Xunit.TraitAttribute("Category", "executedInDelta01")]
        [Xunit.TraitAttribute("Category", "executedInDelta02")]
        [Xunit.TraitAttribute("Category", "executedInDelta03")]
        [Xunit.TraitAttribute("Category", "executedInDelta04")]
        [Xunit.TraitAttribute("Category", "executedInDelta05")]
        [Xunit.TraitAttribute("Category", "executedInDelta06")]
        [Xunit.TraitAttribute("Category", "executedInDelta07")]
        [Xunit.TraitAttribute("Category", "executedInDelta08")]
        [Xunit.TraitAttribute("Category", "executedInDelta09")]
        [Xunit.TraitAttribute("Category", "executedInDelta10")]
        [Xunit.TraitAttribute("Category", "executedInDelta11")]
        [Xunit.TraitAttribute("Category", "executedInDelta12")]
        public void Delta12_FidelityDiscountIsAssignedToCurrency()
        {
            string[] tagsOfScenario = new string[] {
                    "executedInDelta00",
                    "executedInDelta01",
                    "executedInDelta02",
                    "executedInDelta03",
                    "executedInDelta04",
                    "executedInDelta05",
                    "executedInDelta06",
                    "executedInDelta07",
                    "executedInDelta08",
                    "executedInDelta09",
                    "executedInDelta10",
                    "executedInDelta11",
                    "executedInDelta12"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delta12->Fidelity discount is assigned to currency", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 241
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 242
 testRunner.Given("I am Jules", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 243
 testRunner.When("I switch my preferred currency from USD to EUR", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 244
 testRunner.Then("my fidelity discount will be 0%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delta13->Fidelity discount is persisted when the persona switches back to previou" +
            "s currency")]
        [Xunit.TraitAttribute("FeatureTitle", "Basket")]
        [Xunit.TraitAttribute("Description", "Delta13->Fidelity discount is persisted when the persona switches back to previou" +
            "s currency")]
        [Xunit.TraitAttribute("Category", "executedInDelta00")]
        [Xunit.TraitAttribute("Category", "executedInDelta01")]
        [Xunit.TraitAttribute("Category", "executedInDelta02")]
        [Xunit.TraitAttribute("Category", "executedInDelta03")]
        [Xunit.TraitAttribute("Category", "executedInDelta04")]
        [Xunit.TraitAttribute("Category", "executedInDelta05")]
        [Xunit.TraitAttribute("Category", "executedInDelta06")]
        [Xunit.TraitAttribute("Category", "executedInDelta07")]
        [Xunit.TraitAttribute("Category", "executedInDelta08")]
        [Xunit.TraitAttribute("Category", "executedInDelta09")]
        [Xunit.TraitAttribute("Category", "executedInDelta10")]
        [Xunit.TraitAttribute("Category", "executedInDelta11")]
        [Xunit.TraitAttribute("Category", "executedInDelta12")]
        [Xunit.TraitAttribute("Category", "executedInDelta13")]
        public void Delta13_FidelityDiscountIsPersistedWhenThePersonaSwitchesBackToPreviousCurrency()
        {
            string[] tagsOfScenario = new string[] {
                    "executedInDelta00",
                    "executedInDelta01",
                    "executedInDelta02",
                    "executedInDelta03",
                    "executedInDelta04",
                    "executedInDelta05",
                    "executedInDelta06",
                    "executedInDelta07",
                    "executedInDelta08",
                    "executedInDelta09",
                    "executedInDelta10",
                    "executedInDelta11",
                    "executedInDelta12",
                    "executedInDelta13"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delta13->Fidelity discount is persisted when the persona switches back to previou" +
                    "s currency", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 260
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 261
 testRunner.Given("I am Jules", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 262
 testRunner.And("I switched my preferred currency from USD to EUR", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 263
 testRunner.When("I siwtch my preferred currency from EUR to USD", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 264
 testRunner.Then("my fidelity discount will be 5%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delta14->A persona who buys more than 2000 EUR in a single buy upgrades fidelity " +
            "discount by 1%")]
        [Xunit.TraitAttribute("FeatureTitle", "Basket")]
        [Xunit.TraitAttribute("Description", "Delta14->A persona who buys more than 2000 EUR in a single buy upgrades fidelity " +
            "discount by 1%")]
        [Xunit.TraitAttribute("Category", "executedInDelta00")]
        [Xunit.TraitAttribute("Category", "executedInDelta01")]
        [Xunit.TraitAttribute("Category", "executedInDelta02")]
        [Xunit.TraitAttribute("Category", "executedInDelta03")]
        [Xunit.TraitAttribute("Category", "executedInDelta04")]
        [Xunit.TraitAttribute("Category", "executedInDelta05")]
        [Xunit.TraitAttribute("Category", "executedInDelta06")]
        [Xunit.TraitAttribute("Category", "executedInDelta07")]
        [Xunit.TraitAttribute("Category", "executedInDelta08")]
        [Xunit.TraitAttribute("Category", "executedInDelta09")]
        [Xunit.TraitAttribute("Category", "executedInDelta10")]
        [Xunit.TraitAttribute("Category", "executedInDelta11")]
        [Xunit.TraitAttribute("Category", "executedInDelta12")]
        [Xunit.TraitAttribute("Category", "executedInDelta13")]
        [Xunit.TraitAttribute("Category", "executedInDelta14")]
        public void Delta14_APersonaWhoBuysMoreThan2000EURInASingleBuyUpgradesFidelityDiscountBy1()
        {
            string[] tagsOfScenario = new string[] {
                    "executedInDelta00",
                    "executedInDelta01",
                    "executedInDelta02",
                    "executedInDelta03",
                    "executedInDelta04",
                    "executedInDelta05",
                    "executedInDelta06",
                    "executedInDelta07",
                    "executedInDelta08",
                    "executedInDelta09",
                    "executedInDelta10",
                    "executedInDelta11",
                    "executedInDelta12",
                    "executedInDelta13",
                    "executedInDelta14"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delta14->A persona who buys more than 2000 EUR in a single buy upgrades fidelity " +
                    "discount by 1%", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 281
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 282
 testRunner.Given("I am Paul", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "product"});
                table12.AddRow(new string[] {
                            "phone-hero-13-2022"});
                table12.AddRow(new string[] {
                            "phone-hero-13-2022"});
#line 283
 testRunner.And("I add following products to my cart", ((string)(null)), table12, "And ");
#line hidden
#line 287
 testRunner.When("I purchase these products", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Message"});
                table13.AddRow(new string[] {
                            "Thank you for your purchase"});
                table13.AddRow(new string[] {
                            "Congratulations. Now you have a fidelity discount of 1%"});
#line 288
 testRunner.Then("I will have following messages in my inbox", ((string)(null)), table13, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delta->Maximum fidelity discount for a persona is 20%")]
        [Xunit.TraitAttribute("FeatureTitle", "Basket")]
        [Xunit.TraitAttribute("Description", "Delta->Maximum fidelity discount for a persona is 20%")]
        [Xunit.TraitAttribute("Category", "executedInDelta00")]
        [Xunit.TraitAttribute("Category", "executedInDelta01")]
        [Xunit.TraitAttribute("Category", "executedInDelta02")]
        [Xunit.TraitAttribute("Category", "executedInDelta03")]
        [Xunit.TraitAttribute("Category", "executedInDelta04")]
        [Xunit.TraitAttribute("Category", "executedInDelta05")]
        [Xunit.TraitAttribute("Category", "executedInDelta06")]
        [Xunit.TraitAttribute("Category", "executedInDelta07")]
        [Xunit.TraitAttribute("Category", "executedInDelta08")]
        [Xunit.TraitAttribute("Category", "executedInDelta09")]
        [Xunit.TraitAttribute("Category", "executedInDelta10")]
        [Xunit.TraitAttribute("Category", "executedInDelta11")]
        [Xunit.TraitAttribute("Category", "executedInDelta12")]
        [Xunit.TraitAttribute("Category", "executedInDelta13")]
        [Xunit.TraitAttribute("Category", "executedInDelta14")]
        [Xunit.TraitAttribute("Category", "executedInDelta15")]
        public void Delta_MaximumFidelityDiscountForAPersonaIs20()
        {
            string[] tagsOfScenario = new string[] {
                    "executedInDelta00",
                    "executedInDelta01",
                    "executedInDelta02",
                    "executedInDelta03",
                    "executedInDelta04",
                    "executedInDelta05",
                    "executedInDelta06",
                    "executedInDelta07",
                    "executedInDelta08",
                    "executedInDelta09",
                    "executedInDelta10",
                    "executedInDelta11",
                    "executedInDelta12",
                    "executedInDelta13",
                    "executedInDelta14",
                    "executedInDelta15"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delta->Maximum fidelity discount for a persona is 20%", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 309
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 310
 testRunner.Given("I am Maria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "product"});
                table14.AddRow(new string[] {
                            "phone-hero-13-2022"});
                table14.AddRow(new string[] {
                            "phone-hero-13-2022"});
#line 311
 testRunner.And("I add following products to my cart", ((string)(null)), table14, "And ");
#line hidden
#line 315
 testRunner.When("I purchase these products", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Message"});
                table15.AddRow(new string[] {
                            "Thank you for your purchase"});
                table15.AddRow(new string[] {
                            "Your fidelity discount is 20%"});
#line 316
 testRunner.Then("I will have following messages in my inbox", ((string)(null)), table15, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                BasketFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                BasketFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
